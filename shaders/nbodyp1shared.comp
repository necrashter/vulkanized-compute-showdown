#version 450

#include "lib/nbodycommon.comp"

shared vec4 sharedData[LOCAL_SIZE];

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= PARTICLE_COUNT) return;

    vec4 pos = particles[index].pos;
    vec3 acc = vec3(0.0);

    uint i = 0;
    for (; i + LOCAL_SIZE < PARTICLE_COUNT; i += LOCAL_SIZE) {
        if (i + gl_LocalInvocationID.x < PARTICLE_COUNT) {
            sharedData[gl_LocalInvocationID.x] = particles[i + gl_LocalInvocationID.x].pos;
        } else {
            sharedData[gl_LocalInvocationID.x] = vec4(0.0);
        }

        memoryBarrierShared();
        barrier();

        for (uint j = 0; j < LOCAL_SIZE; ++j) {
            applyForce(pos, sharedData[j], acc);
        }

        memoryBarrierShared();
        barrier();
    }
    {
        uint remaining = PARTICLE_COUNT - i;
        if (gl_LocalInvocationID.x < remaining) {
            sharedData[gl_LocalInvocationID.x] = particles[i + gl_LocalInvocationID.x].pos;
        }

        memoryBarrierShared();
        barrier();

        for (uint j = 0; j < remaining; ++j) {
            applyForce(pos, sharedData[j], acc);
        }
    }

    applyCameraForce(pos, acc);

    particles[index].vel.xyz += ubo.delta * acc;

    // Gradually shift the hue of the particle
    shiftColor(particles[index].vel.w);
}

