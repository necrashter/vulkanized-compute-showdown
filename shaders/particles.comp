#version 450

struct Particle {
    vec4 pos;
    vec3 vel;
    float color;
};

// Binding 0 : Position storage buffer
layout(std140, binding = 0) buffer Pos {
    Particle particles[];
};

layout (local_size_x = 256) in;

layout (binding = 1) uniform UBO {
    uint particleCount;
    float delta;
    float size2;
} ubo;


void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= ubo.particleCount) return;

    vec4 pos = particles[index].pos;
    vec3 vel = particles[index].vel;

    pos.xyz += vel * ubo.delta;

    if (dot(pos.xyz, pos.xyz) >= ubo.size2) {
        pos.xyz = vec3(0, 0, 0);
    }
    particles[index].pos = pos;

    // Write back
    particles[index].vel = vel;
}

