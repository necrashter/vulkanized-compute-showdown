#version 450

struct Particle {
    vec3 pos;
    vec3 vel;
};

// Binding 0 : Position storage buffer
layout(std140, binding = 0) buffer Pos {
    Particle particles[];
};

layout (local_size_x = 256) in;

layout (binding = 1) uniform UBO {
    vec3 playerPos;
} ubo;

const vec3 boundsMin = vec3(-10, -5, -10);
const vec3 boundsMax = vec3(10, 5, 10);

void main() {
    uint index = gl_GlobalInvocationID.x;
    /* if (index >= ubo.particleCount) */ 
    /*     return; */

    vec3 pos = particles[index].pos;
    vec3 vel = particles[index].vel;

    pos += vel * 0.05;

    // collide with boundary
    if ((pos.x < boundsMin.x) || (pos.x > boundsMax.x) ||
        (pos.y < boundsMin.y) || (pos.y > boundsMax.y) ||
        (pos.z < boundsMin.z) || (pos.z > boundsMax.z)) {
        vel = (-vel * 0.2);
    } else {
        particles[index].pos = pos;
    }

    // Write back
    particles[index].vel = vel;
}

