#version 450

struct Particle {
    vec4 pos;
    vec4 vel;
};

// Binding 0 : Position storage buffer
layout(std140, binding = 0) buffer Pos {
    Particle particles[];
};

layout (local_size_x = 256) in;

layout (binding = 1) uniform UBO {
    uint particleCount;
    float delta;
} ubo;

layout (constant_id = 0) const float GRAVITY = 0.002;
layout (constant_id = 1) const float POWER = 0.75;
layout (constant_id = 2) const float SOFTEN = 0.0075;

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= ubo.particleCount) return;

    vec4 position = particles[index].pos;
    vec4 velocity = particles[index].vel;
    vec4 acceleration = vec4(0.0);

    for (uint i = 0; i < ubo.particleCount; ++i) {
		const vec4 other = particles[i].pos;
		const vec3 len = other.xyz - position.xyz;
		acceleration.xyz += GRAVITY * len * other.w / pow(dot(len, len) + SOFTEN, POWER);
    }

    particles[index].vel.xyz += ubo.delta * acceleration.xyz;

    // Gradient texture position
    particles[index].vel.w += 0.1 * ubo.delta;
    if (particles[index].vel.w > 1.0)
        particles[index].vel.w -= 1.0;
}

