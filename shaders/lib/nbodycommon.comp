/**
 * Common data used in all compute shaders of nbody simulation.
 */

struct Particle {
    // x,y,z postion; w mass
    vec4 pos;
    // x,y,z velocity; w hue
    vec4 vel;
};

layout(std140, binding = 0) buffer Pos {
    Particle particles[];
};

layout (binding = 1) uniform UBO {
    uint particleCount;
    float delta;
} ubo;

layout (constant_id = 0) const float GRAVITY = 0.002;
layout (constant_id = 1) const float POWER = 0.75;
layout (constant_id = 2) const float SOFTEN = 0.0075;
layout (constant_id = 3) const uint LOCAL_SIZE = 256;
layout (local_size_x_id = 3, local_size_y = 1, local_size_z = 1) in;

// Apply force to the first particle
// pos: position of the first particle
// other: position of the second particle
// acc: acceleration of the first particle
void applyForce(in vec4 pos, in vec4 other, inout vec3 acc) {
    const vec3 dir = other.xyz - pos.xyz;
    const float mass = other.w;
    acc += GRAVITY * dir * mass / pow(dot(dir, dir) + SOFTEN, POWER);
}


void shiftColor(inout float hue) {
    hue += 0.1 * ubo.delta;
    if (hue > 1.0) hue -= 1.0;
}

